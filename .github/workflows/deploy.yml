name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main  # or master, depending on your default branch name
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libpq-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-full.txt
          pip install gunicorn requests

      - name: Generate static files
        run: |
          mkdir -p _site
          python - << 'EOF'
          import os
          import dash
          from dash import html
          import flask
          import json
          from dashboard import app, df
          import plotly.express as px
          
          # Create the _site directory if it doesn't exist
          os.makedirs('_site', exist_ok=True)
          os.makedirs('_site/assets', exist_ok=True)
          
          # First, we'll generate all the initial figures by triggering the callbacks
          from dashboard import (
              update_war_graph,
              update_career_graph,
              update_position_graph,
              update_demographics_graph
          )
          
          # Generate initial figures with default values
          initial_figures = {
              'war-by-age': update_war_graph('age'),
              'career-analysis': update_career_graph('years'),
              'position-analysis': update_position_graph('distribution'),
              'demographics-analysis': update_demographics_graph('age')
          }
          
          # Save the figures as JSON
          os.makedirs('_site/_dash-layout', exist_ok=True)
          for fig_id, fig in initial_figures.items():
              with open(f'_site/_dash-layout/{fig_id}.json', 'w') as f:
                  json.dump(fig, f)
          
          # Copy all static assets
          if os.path.exists('assets'):
              import shutil
              for item in os.listdir('assets'):
                  s = os.path.join('assets', item)
                  d = os.path.join('_site/assets', item)
                  if os.path.isfile(s):
                      shutil.copy2(s, d)
          
          # Generate the index.html
          app.index_string = '''
          <!DOCTYPE html>
          <html>
              <head>
                  {%metas%}
                  <title>Houston Astros Analytics Dashboard</title>
                  {%favicon%}
                  {%css%}
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <style>
                      body { margin: 0; }
                      .dash-debug-menu { display: none; }
                  </style>
              </head>
              <body>
                  {%app_entry%}
                  <footer>
                      {%config%}
                      {%scripts%}
                      {%renderer%}
                  </footer>
              </body>
          </html>
          '''
          
          # Get the initial HTML
          client = app.server.test_client()
          response = client.get('/')
          
          with open('_site/index.html', 'wb') as f:
              f.write(response.data)
          
          # Create a minimal dash-deps.js with the initial state
          init_state = {
              'war-metric': 'age',
              'career-metric': 'years',
              'position-metric': 'distribution',
              'demographics-metric': 'age'
          }
          
          dash_deps = f'''
          window.dash_clientside = {{
              initial_state: {json.dumps(init_state)}
          }};
          '''
          
          with open('_site/dash-deps.js', 'w') as f:
              f.write(dash_deps)
          
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 