name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main  # or master, depending on your default branch name
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libpq-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-full.txt
          pip install gunicorn

      - name: Generate static files
        run: |
          mkdir -p _site/assets
          python - << 'EOF'
          import dash
          from dash import html
          import plotly.express as px
          from dashboard import app
          
          # Configure the app for static file generation
          app.index_string = '''
          <!DOCTYPE html>
          <html>
              <head>
                  {%metas%}
                  <title>Houston Astros Analytics Dashboard</title>
                  {%favicon%}
                  {%css%}
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
              </head>
              <body>
                  {%app_entry%}
                  <footer>
                      {%config%}
                      {%scripts%}
                      {%renderer%}
                  </footer>
              </body>
          </html>
          '''
          
          # Save the HTML
          with open('_site/index.html', 'w', encoding='utf-8') as f:
              f.write(app.index.get_string())
          
          # Save any static assets
          for resource in app.get_asset_url('/'):
              resource_path = resource.replace('/', '')
              if resource_path:
                  with open(f'_site/assets/{resource_path}', 'wb') as f:
                      f.write(app.get_asset_file(resource_path))
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  deploy:
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 